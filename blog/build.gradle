plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.2.1'
}

jib {
    from {
        image = 'openjdk:17.0.2-slim'
    }
    to {
        image = 'docker.io/yunhwan95/board'
        tags = ['1.0.6']
    }
    container {
    	entrypoint = ['java', '-Dspring.profiles.active=prod', '-jar', 'blog-0.0.1-SNAPSHOT.jar']
        ports = ['8080']
        environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
        labels = [Iversion: project.version, name: project.name, group: project.group]
        format = 'Docker'
        //jvmFlags = [
        //			'-Dspring.profiles.active=prod',
        //			'-Dfile.encoding=UTF-8',
        //]
        //environment = [
        //    'SPRING_PROFILES_ACTIVE': 'prod'
        //]
        //jvmFlags = ["-Xms128m", "-Xmx128m"]
    }
    extraDirectories {
        paths { 
            path {
                from = file('build/libs') 
            }
        }
    }
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

//프로젝트 단위 변수 설정
def profile = project.hasProperty('profile') ? project.property('profile') : 'local'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//implementation 'org.springframework.security:spring-security-crypto'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
	
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'
	implementation group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '3.0.3'
	implementation group: 'org.mybatis', name: 'mybatis', version: '3.5.16'
	implementation group: 'org.mybatis', name: 'mybatis-spring', version: '3.0.3'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.3.2'
	
	implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.32'	
	implementation 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', profile
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', "src/main/resources-env/${profile}"]
        }
    }
}

bootRun {
    systemProperty 'spring.profiles.active', profile
}


println "Profile: ${profile}"
sourceSets.main.java.srcDirs.each { println "Java source dir: $it" }
sourceSets.main.resources.srcDirs.each { println "Resource dir: $it" }
